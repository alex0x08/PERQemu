!!!     Rat - Raster-op Test.
!       J. P. Strait    14 Sep 80.
!       Copyright (C) Three Rivers Computer Corporation, 1980, 1981, 1982, 1983.


!!      Rat - Change log.
!
!       V1.2  JPS   6 Nov 80  Fix the format of the screen a bit.
!
!       V1.1  JPS   5 Nov 80  Didn't make it.
!
!       V1.0  JPS  13 Oct 80  Reconstruct program after loss of source file.


!!!     Rat - Raster-op Test.
!
!       Rat is a source-data-suspicious raster-op test.  To run Rat,
!       load Rat (in OdtPrq) and overlay RO.  Then set the Option
!       register (200) to one of the following values.
!
!            0 - Return to Krnl on error.
!            1 - Loop forever on the case with the first error.
!            2 - Repeat after a small delay whenever an error is found.
!            3 - Continue after a small delay whenever an error is found.
!
!       Then type 'G'.
!
!       Rat may return to the Krnl with one of the following breakpoints.
!
!            100 - Successful completion of the test with no errors.  Rat
!                  takes about 2 hours to complete.
!            101 - Rat detected an error (option 0).
!            111 - Rat detected an error, but the Option register had an
!                  undefined value.
!
!       When Rat detects an error, you may examine the four registers
!       that give Source, Destination, Width, and Direction.




!       Register definitions.

        Define(Option,200);              ! Rat option
        
        Define(Source,201);              ! source bit in quad
        Define(Destination,202);         ! destination bit in quad
        Define(Width,203);               ! width
        Define(Direction,204);           ! 0 = LtoR, 1 = RtoL
        
        Define(xSource,205);             ! source X-coordinate
        Define(ySource,206);             ! source Y-coordinate
        Define(xDestination,207);        ! destination X-coordinate
        Define(yDestination,210);        ! destination Y-coordinate
        Define(Y,211);                   ! general purpose Y-coordinate
        Define(Word,212);                ! word address
        Define(W,213);                   ! general purpose word address
        Define(Bit,214);                 ! a single bit is set in this word
        Define(Top,215);                 ! top margin above diagonal line
        Define(Bottom,216);              ! bottom margin below diagonal line
        Define(LeftWord,217);            ! word with left edge of destination
        Define(RightWord,220);           ! word with right edge of destination
        Define(MaskL,221);               ! mask at left edge of destination
        Define(MaskR,222);               ! mask at right edge of destination
        Define(Height,223);              ! height
        Define(wEnd,224);                ! ending word address
        Define(Fail,225);                ! failure/success flag
        Define(Screen,226);              ! base address of the screen
        Define(wSource,227);             ! first address of the source area
        Define(wDestination,230);        ! first address of destination area
        Define(TopSource,231);           ! top source area Y-coordinate
        Define(TopDestination,232);      ! top destination area Y-coordinate
        Define(Scan,233);                ! scan line address
        Define(yEnd,234);                ! ending Y-coordinate
        Define(MarkWidth,244);           ! address of width marker
        Define(MarkSource,245);          ! address of source marker
        Define(MarkDestination,246);     ! address of destination marker
        
        Define(I,240);                   ! counter
        Define(T1,241);                  ! temporary
        Define(T2,242);                  ! temporary
        Define(C100000,243);             ! 100000
        
        Define(SB,7);                    ! stack base (RO.Micro)
        Define(AllOnes,60);              ! 177777 (RO.Micro)
        
        Define(r370,370);                ! breakpoint number (Krnl.Micro)




!       Constants.

        Constant(ScreenBase,3000);       ! address of the screen
        Constant(yTop,0);                ! Y-coordinate of the top area
        Constant(wTop,3000);             ! yTop * 60 + ScreenBase
        Constant(yBottom,1000);          ! Y-coordinate of the bottom area
        Constant(wBottom,63000);         ! yBottom * 60 + ScreenBase
        Constant(qStart,2);              ! first quad across scan line
        Constant(wStart,10);             ! qStart * 4
        Constant(xStart,200);            ! wStart * 20
        
        Constant(RasterOp,4000);         ! micro address of Raster-Op
        Constant(BreakPoint,7401);       ! breakpoint address in Krnl.Micro
        Constant(KrnlSrv,7600);          ! interrupt service in Krnl.Micro
        Constant(IOSrv,3400);            ! interrupt service called by RO.Micro




        Place(0,3777);




!!      Initialize - Initialize the screen.

Initialize:

!       Clear the screen.

        Word := Screen;
        I := 30000;            ! number of quads on screen
Init1:  Word, Store4;
        0;
        0;
        0;
        0, if IntrPend call(VecSrv);
        I := I - 1;
        Word := Word + 4, if Neq goto(Init1);    ! if screen not yet clear

!       Draw a diagonal line in the source area.

        Word := wSource;
        Word := Word + wStart;
        Bit := c100000;
        I := 40;               ! number of bits on the line div 16
Init2:  Word, Store;
        Bit, RightShift(1);
        Bit := Shift;
        Word := Word + 60, if Neq goto(Init2);  ! if bit not yet wrapped around
        Word := Word + 1, if IntrPend call(VecSrv);
        I := I - 1;
        Bit := c100000, if Neq goto(Init2);  ! if not yet done
        I := 107774;
        Screen + I, Store4;
        177777;
        177777;
        177777;
        177777;
        Screen + MarkDestination, Store;
        177777;
        Screen + MarkSource, Store;
        177777;
        Screen + MarkWidth, Store;
        177777;
        return;
        
        


!!      Check - Check screen for errors.

Check:
        
!       Rotate to correct bit position;

        Bit := c100000;
        Word := wStart;
        Scan := wDestination;
        Y := TopDestination, goto(Check2);

Check1: Y := Y + 1;
        Bit, RightShift(1);
        Bit := Shift;
        Scan := Scan + 60, if Neq goto(Check2);  ! if bit not wrapped around
        Word := Word + 1;
        Bit := c100000, if IntrPend call(VecSrv);
Check2: Y - yDestination;
        if Neq goto(Check1);
        xDestination, RightShift(4);
        LeftWord := Shift + 1;
        T1 := xDestination;
        T1 := T1 + Width;
        T1 - 1;
        RightWord := Shift + 1;
        MaskL := 177777;
        MaskR := MaskL;
        I := xDestination;
        I := I and 17, goto(Check4);
        
Check3: MaskL, RightShift(1);
        MaskL := Shift, if IntrPend call(VecSrv);
Check4: I := I - 1;
        if Geq goto(Check3);
        I := T1;
        I := I and 17, goto(Check6);

Check5: MaskR, RightShift(1);
        MaskR := Shift, if IntrPend call(VecSrv);
Check6: I := I - 1;
        if Geq goto(Check5);
        MaskR := not MaskR;
        LeftWord - RightWord;
        W := wStart, if Neq goto(Check7);
        MaskL := MaskL and MaskR;
        MaskR := MaskL;
Check7: wEnd := RightWord, if IntrPend call(VecSrv);
        wEnd := wEnd + 3;
        wEnd := wEnd and not 3;
        yEnd := yDestination;
        yEnd := yEnd + Height;
        RightWord := RightWord - wEnd;
        LeftWord := LeftWord - wEnd;
        Word := Word - wEnd;
        Scan := Scan + wEnd, goto(Check14);

Check8: W := wStart;
        W := W - wEnd, if IntrPend call(VecSrv);
Check9: W + Scan, Fetch;
        W - Word, if IntrPend goto(Check9a);
        W := W + 1, if Eql goto(Check10);
        Fail := Mdi or Fail, if Neq goto(Check9);
        Fail, goto(Check13);
        
Check9a:Call(VecSrv);
        goto(Check9);
        
Check10:T1 := Mdi;
        W - RightWord;
        W - LeftWord, if Gtr goto(Check12);
        if Lss goto(Check12);
        T1 := T1 xor Bit;
        W - LeftWord;
        W - RightWord, if Neq goto(Check11);
        T1 := T1 and MaskL, goto(Check12);
        
Check11:if Neq goto(Check12);
        T1 := T1 and MaskR;
Check12:Fail := Fail or T1;
        if IntrPend call(VecSrv);
        W;
        Fail, if Neq goto(Check9);
Check13:Y := Y + 1, if Neq goto(Check15);
        Bit, RightShift(1);
        Bit := Shift;
        Scan := Scan + 60, if Neq goto(Check14);
        Word := Word + 1, if IntrPend call(VecSrv);
        Bit := c100000;
Check14:Y - yEnd;
        if Neq goto(Check8);
        Fail, return;
        
Check15:Scan := Scan - 60;
        Scan, Store4;
        177777;
        177777;
        177777;
        177777;
        if IntrPend call(VecSrv);
        Scan + 4, Store2;
        177777;
        177777;
        Fail, return;




!!      Test - Run a set of tests.

Test:   Destination := 0;
        MarkDestination := 56;
Test1:  Screen + MarkDestination, Store;
        177777;
        xDestination := Destination, if IntrPend call(VecSrv);
        xDestination := xDestination + xStart;
        xDestination := xDestination + 100;
        Source := 0;
        MarkSource := 55;
Test2:  Screen + MarkSource, Store;
        177777;
        xSource := Source, if IntrPend call(VecSrv);
        xSource := xSource + xStart;
        xSource := xSource + 100;
        Source - Destination;
        Top := Source, if Geq goto(Test3);
        Top := Destination;
Test3:  ySource := TopSource;
        ySource := ySource + Source;
        ySource := ySource + 100;
        ySource := ySource - Top;
        yDestination := TopDestination;
        yDestination := yDestination + Destination;
        yDestination := yDestination + 100;
        yDestination := yDestination - Top;
        Width := 1;
        MarkWidth := 54, call(Initialize);
Test4:  Screen + MarkWidth, Store;
        177777;
        T1 := Source, if IntrPend call(VecSrv);
        T1 := T1 + Width;
        T1 := T1 and 77;
        T2 := Destination;
        T2 := T2 + Width;
        T2 := T2 and 77;
        T1 - T2;
        Bottom := T1, if Leq goto(Test5);
        Bottom := T2;
Test5:  Tos := 100;
        Bottom := Tos - Bottom, if IntrPend call(VecSrv);
        Height := Width;
        Height := Height + Top;
        Height := Height + Bottom;

!       Call Raster-Op.

Test6:  Fail := 0, Loc(2300);
Test7:  if IntrPend call(VecSrv);
        Bpc := 10;
        Tos := 0, Push;
        Tos := Width, Push;
        Tos := Height, Push;
        Tos := xDestination, Push;
        Tos := yDestination, Push;
        Tos := 60, Push;
        Tos := Screen - SB, Push;
        Tos := xSource, Push;
        Tos := ySource, Push;
        Tos := 60, Push;
        Tos := Screen - SB, Push;
        goto(RasterOp);
Loc(0), Fail;
        if Neq goto(Test7);             ! if loop on error desired
        Call(Check);
        if Neq goto(Test8);
Test7a: Screen + MarkWidth, Store;      ! if errors
        0;
        MarkWidth := MarkWidth + 300;
        Width - 300;
        Width := Width + 1, if Neq goto(Test4);
        Screen + MarkSource, Store;
        0;
        MarkSource := MarkSource + 1100;
        Source - 77;
        Source := Source + 1, if Neq goto(Test2);
        Screen + MarkDestination, Store;
        0;
        MarkDestination := MarkDestination + 1100;
        Destination - 77;
        Destination := Destination + 1, if Neq goto(Test1);
        return;
        
Test8:  Option;
        r370 := 101, if Eql goto(BreakPoint);

!       Wait a moment.

        T1 := 10;
Test9:  T2 := 0;
Test10: if IntrPend call(VecSrv);
        T2 := T2 - 1;
        if Neq goto(Test10);
        T1 := T1 - 1;
        if Neq goto(Test9);
        Call(Initialize);
        Option - 1;
        Option - 2, if Eql goto(Test7);
        Option - 3, if Eql goto(Test6);
        0, if Eql goto(Test7a);
        r370 := 111, Goto(BreakPoint);
        
Loc(2500), Call(Initialize);
        0, goto(Test7a);




!!!     Rat - Main program.

Rat:    Screen := ScreenBase, Loc(2400);
        c100000 := 100000;
        AllOnes := 177777;
        TopSource := yBottom;
        wSource := wBottom;
        TopDestination := yTop;
        wDestination := wTop;
        Direction := 0, Call(Test);
        TopSource := yTop;
        wSource := wTop;
        TopDestination := yBottom;
        wDestination := wBottom;
        Direction := 1, Call(Test);
        r370 := 100, goto(BreakPoint);




!!      Interrupt service.

VecSrv: Vector(7600);

Loc(3400), Goto(7600);
Loc(3404), Goto(7604);
Loc(3410), Goto(7610);
Loc(3414), Goto(7614);
Loc(3420), Goto(7620);
Loc(3424), Goto(7624);
Loc(3430), Goto(7630);
Loc(3434), Goto(7634);




        end;
