! Test5Boot.Micro
! --------------------------------------------------------
!       *** NOT FOR PROMS ***    Only for ODTprq Use
! --------------------------------------------------------
!
!            Perq Boot Prom Microcode   Version 4
!   Written by Brian Rosen
!   Copyright (C) 1981 Three Rivers Computer Corporation, Pittsburgh PA.
!
!
!   This code resides in the 512 microinstruction Boot Prom
!   It occupies the low 512 words of the 4k addressable Writable
!   Microstore.  The prom is enabled by the boot button, and
!   when enabled, overlaps the bottom 2k of RAM.  Addresses from
!   512 to 2047 are essentially unused when the prom is on (they are
!   actually the Boot prom repeated every 512 locations.  It is possible
!   to address the upper 2k of ram from the prom.
!   The prom is disabled by executing a LoadOp special function. When
!   disabled, the prom is not addressable, and the Ram occupies the
!   entire 4k address space.  It is not possible for the prom to become enabled
!   by anything other than pressing the boot button.
!
!   This code first attempts to verify correct operation of the processor
!   at least enough to run the boot loader.
! 
!---------------------------------------------------------------------------
!
! Change History:
!
! 17 Dec 84 V0.1 Rich Huber    
!           Modify to ignore Link board and Return to ODT on Failure.
!           This is to help Techs solve the "Boots to 14 !@#$%&" syndrome
!
!---------------------------------------------------------------------------
!
! V5.3 proms have the following checksums:
!
!  16K (Version = C)
!    A -  3BE1
!    B -  C94A
!    C -  E2CF
!    D -  9D04
!    E -  52A8
!    F -  5D99
!
!


$perq1a
        Define(R0,0);  !Define registers with varing bit patterns for addresses
        Define(R1,1);
        Define(R2,2);
        Define(R4,4);
        Define(R10,10);
        Define(R20,20);
        Define(R40,40);
        Define(R100,100);
        Define(R200,200);
        Define(R252,252);
        Define(R277,277);
        Define(R307,307);
        Define(R337,337);
        Define(R350,350);
        Define(R357,357);
        Define(R367,367);
        
        define(tmp,346);
        
        DEFINE(R370, 370);     { For BreakPoints in ODTprq }
        
        Define(R373,373);
        Define(R375,375);
        Define(R376,376);
        Define(R377,377);
        Constant(IOCtlReg, 305);    !control register IO address;


        Place(0,777);               !Boot code occupies lower 512 locations

        Tmp := 10,Call(SetDisplay),loc(0); !Start Here as Boot proms do
        R370 := 110;
! fall in to the boot code 

!Perq Boot Loader
!Brian Rosen with John Strait
!Copyright (C) 1980   Three Rivers Computer Corporation
!
! Will Boot from 1 of 3 sources
!       1 - If Link Cable is plugged in, will boot from link
!       2 - If Cable is not in, will try to boot from Floppy
!       3 - If that fails, will try to boot from Hard Disk
!       4 - if that fails, will loop forever
!
!
!
constant(IntVec,700);  !Interrupt vector location
!
!    B O O T   f r o m   L I N K
!
!Assumes PDP-11 Link on other end
!Protocol:  PDP-11 Sends a 12345 as a flag, when Perq sees it, it
!           starts receiving 3 word data items to be loaded into
!           the control store.  256 (decimal) words are loaded
!           at location 7400 in the ram, with last word written
!           first (ie 7777 first, 7776 next,...,7400 last)
!           Data is sent low word 1st, then mid, then hi
!           When all 256 MI are loaded, Boot jumps to 7400

define(count,1);        !The number of microinstructions to load
define(data,2);         !the guy who has the data to be written
constant(ReadCsr,40);  !Complement of 40, the read csr address
constant(WriteCsr,241); !Write csr, with z7 set for write
constant(ReadData,42);
constant(WriteData,243);
constant(XmitDone,10);  !These define the bits in the csr
constant(Flag,4);       !They are mainly for reference
constant(RcsrToBus,1);  !Since the microassembler won't allow
constant(XbufCyc,2);    !expressions where a constant is expected
constant(STX,252);
constant(Floppy,3);
constant(Boot,12);
constant(Reset, 0);
constant(BLKDATAcmd,2);
constant(NACKcmd, 5);
define(C400,4);


Begin:  C400 := 400;
        IOB(ReadCsr);
        IOD AND Flag;                     !Check Flag to see if Link is present
        GoTo(DiskStart);  ! Used to Be "If NEQ"
! else boot from link 
! first thing to read is actually Krnl.Bin
        
Start:  Count := 377;           !Number of micro instructions to load -1
        LoadS(7777), Count := Count + 1;  !Load R Counter with 1st addr to load
        5,IOB(WriteCsr);       !XmitDone:=1, Flag:=0, RcsrToBus:=1, XbufCyc:=0
WaitHeader: Call(AwaitData);              !Look for header word
        Data xor 12345;                   !check to see if it is right
        IF Neq GoTo(WaitHeader);
MainLoop: Call(AwaitData);                !Returns with Data in UW
        Data;
        WCSlow, if true GoToS(DatMid); !Write Control Store using R as the addr
DatMid: Call(AwaitData);
        Data;
        WCSmid, if true GoToS(DatHi);
DatHi:  Call(AwaitData);
        Data;
        WCShi, if true GoToS(DecAdr);
DecAdr: Repeat(DoLoop), Count := Count - 1;
DoLoop: IF Neq GoTo(MainLoop);
        GoTo(7400);                       !Jump to the code just loaded
AwaitData: IOB(ReadCsr);                  !Wait for a word to come from PDP-11
        IOD AND XbufCyc;             !Check for him to load his transmit buffer
        IF Eql GoTo(AwaitData);           !Keep looping until he does
        15, IOB(WriteCsr);                !Clear XmitDone
        IOB(ReadData);                    !Get the data
        Data := IOD;
        5, IOB(WriteCsr), Return;         !Set Xmit Done

!
!       B O O T  f r o m  D I S K
!
!
!
!Use the Floppy or Hard Disk to Read Microcode
!Step the head to track 0, and read 2k of microcode
!2048 microwords of 48 bits each (3 - 16 bit words) is 6144 words
!at 256 words/sector 6144 div 256 is 24 sectors
!
!   Display Error Codes
!     10 - Hung in Disk Boot
!     11 - Memory Data Error
!     12 - Memory Address Error
!     13 - Disk Didn't come ready
!     14 - Couln't boot from either disks
!     15 thru 21 - Bad Interrupts Reading Floppy Disk Data
!     29 - Finished Disk Code
 
define(TryCnt,10);
define(tmp1, 343);
define(ByteCnt,344);   !Note Same register as Dir
define(Bite,345);      !Note Same register as Head
define(MemAdr,347);

  
define(CkSum,350);          !Should be 370, set to 350 for testing
define(Dly,252);
!  Count In Diagnostic Display Register when this routine is called
!  Count In Diagnostic Display Register when this routine finishes
!    Difference ->  DDSend - DDSstart
constant(DskDDSdif,10#19);
constant(IOStatReg, 125);   ! IO bus status
constant(IOWrtFIFO, 304);   ! write FiFo channel addr
constant(IOReadFIFO, 124);  ! read FIFO channel
constant(fault, 40);
constant(seekError, 20);

DiskStart:
        memAdr := 0, CntlRasterOp(0), loc(240);     !turn RasterOp off
        100, store;                    !get memory state cleared
        tmp := 6000;                   !Must turn off video
        100, fetch;
        tmp, IOB(341);                 !Initialize video addresses
        tmp, IOB(341);
        tmp, IOB(343);                 !Shut off video interrupts


! Try to read the Floppy
! Format STX <2> <floppy> <Boot>

DoFloppy:  ByteCnt := 0, call(InitAll);
        R370 := 120;
        4, IOB(ioCtlReg);              ! turn on Z80
        cksum := 0, call(WaitAwhile);  ! wait a while
        6, IOB(ioCtlReg);              ! enab write chan
        call(RecZ80Byte);              !wait for wrtRdy Interrupt
        STX, IOB(ioWrtFIFO);                  
        2, IOB(ioWrtFIFO);                    
        Floppy, IOB(ioWrtFIFO);               
        Boot, IOB(ioWrtFIFO);                 
        5, IOB(ioCtlReg);               !turn off write chan

MoreBytes: ByteCnt := ByteCnt - 2;          !Count bytes in this block
           tmp := 100, if gtr goto(RdFlop); !More to do, otherwise, new block
        
FindHdr: Tmp := Tmp - 1;                !Count Chars
        Dly := 377, if leq goto(IsDskRdy);          !Get a Z80 byte
        Call(RecZ80Byte);
        R370 := 130;
        Bite xor STX; 
        If neq goto(FindHdr);           !Try some more
        
GotHdr: Call(RecZ80Byte);
        ByteCnt := Bite;                
        CkSum := 0, Call(RecZ80Byte);   !Get Byte Count
        Bite xor Floppy;                
        ByteCnt := ByteCnt - 1, if Neq GoTo(WasteIt);    !expect <dev>=floppy
        Call(RecZ80Byte);
        Bite xor BLKDATAcmd;            
        ByteCnt := ByteCnt - 1, if neq GoTo(WhatIsIt); 
        Call(RecZ80Byte);
        ByteCnt := Bite, Call(RecZ80Byte);   ! cnt L
        Bite, LeftShift(10);                 ! cnt H
        ByteCnt := SHIFT or ByteCnt; 
RdFlop: Call(RecZ80Byte);               !Get a Data Word
        Data := Bite, Call(RecZ80Byte); !Save low byte, get high Byte
        Bite, LeftShift(10);           
        Data := Shift or Data;
        MemAdr, Store;
        Data;       
        MemAdr xor 13777;               ! Check Expiration of data
        MemAdr := MemAdr + 1, if Neq GoTo(MoreBytes);
        Reset, IOB(ioCtlReg);           ! turn off z80   
        Data := 0, Call(Copy);
        if eql GoTo(StartIt);           !If sucessfull, go execute it
        Dly := 377, GoTo(IsDskRdy);
        
        
WhatIsIt: Bite xor NACKcmd;
          Dly := 377, If Eql GoTo(IsDskRdy);
          R370 := 140;
WasteIt:  Call(RecZ80Byte);
          ByteCnt := ByteCnt - 1;
          If Eql GoTo(FindHdr);
          GoTo(WasteIt);
             


define(dskTmp,330);
define(dskCMD,331);     
define(dskCyl,332);     
define(dskhead,333);
define(dskSec,334);
define(dskStatus,340);
define(DriveNum,267);
define(BA,342);

! disk DMA constants

constant(dskChan, 2);
constant(ChanSel, 300);        
constant(DmaLhLo, 326);        ! logical header lo I/O address
constant(DmaLhHi, 327);        ! logical header Hi I/O address
constant(DmaDbLo, 324);        ! data block address Lo
constant(DmaDbHi, 325);        ! data block Address Hi

! disk io port number 

constant(dskstat, 123);        
constant(smctl, 322);           
constant(dskctl, 323);         

! disk Status register bits

constant(Track0,       20);
constant(FaultBit,     40);
constant(ReadyBit,     200);
constant(ReadyFault,   240);   ! FaultBit or ReadyBit.
constant(OnCyl,100);           !msk for on cyl bit
constant(Index, 400);

! disk control Register constant
! These are used to by disk controller to interpret the other six bits in the
! control byte. They are bits <6:7> of the control byte.

constant(HiSeekCount, (2 lsh 6));
constant(LoSeekCount, (1 lsh 6));
constant(ControlBits, (3 lsh 6));           

! disk Interface port constants

constant(PreSet,10);        ! enable controller
constant(IntrEnb, 20);
constant(EnbHlf, PreSet or
                 IntrEnb);
                 
! Load Constant Register constants

constant(sync, 360);
constant(ConstPtr, 320);
constant(RamFile, 321);

! some handy literals

constant(Nibble, 17);
constant(HiNibble, 360);
constant(loByte, 377);
constant(WrtReady, 200);

Constant(SeekIn, 20);                          ! Seek to hi cyl numbers.
Constant(SeekOut, 0);                          ! Seek to low cyl numbers.

IsDskRdy: Tmp := 10#90, Call(SetDisplay), Loc(200); ! DDS to 100
          TryCnt := 2, call(InitAll);               ! try drive #0 only
          R370 := 110;
          DriveNum := 0;
          
Tryagain: DriveNum and ControlBits, IOB(dskCtl); ! drivenum, in bit5 
          r1 := not 0, call(IsDrvRdy);                      
          dskCyl := 0, if Eql GoTo(GoManGo);
          R370 := 111;                           ! if drive #0 not Ready
          Goto(Busted);                          ! Then Brkpnt 111, DDS = 101

wloop:  r1 := r1 - 1, store;                
        r1;
        R370 := 375;
        r1, fetch;
        mdi - r1;
        tmp := 1, if neq goto(Busted);         !Code 11, Memory Error
        r1 - 1;
        if c19 goto(doread);
        goto(wloop);
        
doread: r1 := 0;
        R370 := 376;
rloop:  r1 := r1 - 1, fetch;
        mdi - r1;
        tmp := 2, if neq goto(Busted);         !Code 12, Memory Address Error
        r1 - 1;
        if c19 goto(tryagain);
        goto(rloop);

  
NoDskSpinUp: 
           tmp := 2, Call(SetDisplay);
           GoTo(Busted);                       !Code 13,  Disk Error
        

GoManGo:   R370 := 120;
           Tmp := 10#100, Call(SetDisplay);    ! bump DDS to 200
           dskHead := 1, call(Restore);        !seek to cyl 0
           
          
!Read the disk into memory

           R370 := 130;
           Tmp := 10#100, Call(SetDisplay);    ! bump DDS to 300
           dskCyl := 0, Call(DoDiskRead);      !First try Cylinder 0, head 0
           Tmp := 4, If Eql GoTo(StartIt);     !You Made it
           
            Stackreset;                        ! Got Bad CkSum, But the Krnl
KrnlFooBar: Goto(KrnlFooBar);                  ! is Porked so just Hang Forever
                                               ! with DDS at 501
                                               
                                               

Busted:    StackReset;
Sleep:     GoTo(7401);                         !Goto ODTprq

SetDisplay:StackReset,
           Dly := 20;                          ! Give DDS hardware a break
SDloop:    Dly := Dly - 1;
           If Neq Goto(SDloop);
           Nop,next;                           !oops
           tmp := tmp - 1;
           if neq goto(SetDisplay);
           return;
!
!Looks Good, try to execute the code you loaded
!
StartIt:   tmp := 10#100, Call(SetDisplay);    ! Bump DDS to 600
           R370 := 150;                        ! This is It 
           Call(restore);
           R370 := 0;
           tmp := 10#419;                      ! Same DDS Nums as BootUp
           Call(SetDisplay);                   ! Read Disk OK, DDS = 1029
           0, IOB(ioCtlReg);                   ! turn off z80 write interrupt
           GoTo(4000),loc(600);                ! NOTE: If DDS hangs at 600
                                               !       Then Punt or (!$#&*#@%)
                                               !
!
!Try to read 24 sectors into memory from 0 to 13777
!
DoDiskRead:dskSec := 27;                       !Read 24(Decimal) sectors
           MemAdr := 13400;                    ! first sector 13400-13777
           CkSum := 0;



!
!Read one sector from the hard disk into memory
!
DoOneSec:  DskSec - 17;                        ! have we done 16 yet.
           DskHead := 1, if gtr goto(dosec);    ! if not head = 0
           DskHead := 0;
DoSec:     Tmp1 := DskHead;
           Tmp1 := Tmp1 Or DriveNum;           ! or in the drivenum
           tmp1 Or ControlBits, IOB(DskCtl);   ! set disk controller
           dskCmd := 5, call(LoadConst);       ! LoadConst sets DMA.
           dskCmd or EnbHlf, IOB(SmCtl);       ! ld cmd
ChkAgain:  DskStatus := 0, If IntrPend Call(VecInt);
           DskStatus And 3777;                 ! interrupt?
           If Eql GoTo(ChkTime);               ! No- check for time out
           DskStatus And Fault;                !  Fault??
           DskStatus And 10, If Eql goto(NoDskSpinUp); ! No, check for int
           DskStatus And 7, If EQL GoTo(ChkTime); ! not a SM interrupt
           DskStatus and 6 ,If EQL GoTo(NextSec); ! not a completion interrupt
           tmp := 4, If neq goto(Busted);
ChkTime:   r1 := r1 - 1;
           Tmp := 4, If C19 GoTo(Busted);
           Dly := 10, Call(WtWl1);
           GoTo(ChkAgain);
         
NextSec:   EnbHlf, IOB(SMctl);                 ! clear cmd reg, if intr
           dskSec := dskSec - 1;               !Count your sectors
           MemAdr := MemAdr - C400, if geq GoTo(DoOneSec); !Do another sector
           Data := 0;
!
!Data is now loaded into memory, Now CheckSum It before Overlay of "KRNL.BIN"
           R370 := 140;
           Tmp := 10#100, Call(SetDisplay);    ! bump DDS to 400
                                               ! About to CHeckSum Boot Data

CkCopy:    MemAdr := 14000;        !Starting at the high end of the data
           LoadS(7777);            !
Ckwd0:     Cksum := Cksum + Data, Call(NextData); ! Check High Word
Ckwd1:     Cksum := Cksum + Data, Call(NextData); ! Check Mid Word
Ckwd2:     Cksum := Cksum + Data, Call(NextData); ! Check Low Word
Ckwd3:     MemAdr, Repeat(ckwd4);          !Decrement Address, check Address
Ckwd4:     if gtr goto(ckwd0);             !if >0 more to do
           Cksum + Data;                   !otherwise, add final word to Cksum
           If Neq Goto(Busted);            ! CkSum must be 0
           
DoCopy:    Tmp := 10#100, Call(SetDisplay);  ! bump DDS to 500
           R370 := 150;                      ! Tnis means The CkSum Was Good
           
           Data := 0;              ! CheckSum it Again while writing to
           CkSum := 0;             ! controlstore. The KRNL is no more from
                                   ! this point on.

Copy:      MemAdr := 14000;        !Starting at the high end of the data
           LoadS(7777);            !Load into top 2k of microstore
wd0:       Cksum := Cksum + Data, Call(NextData); !Write high word 1st
           WCShi,  if true GotoS(wd1);
wd1:       Cksum := Cksum + Data, Call(NextData); !Always accumulating checksum
           WCSmid, if true GoToS(wd2);
wd2:       Cksum := Cksum + Data, Call(NextData);
           WCSlow, if true GoToS(wd3);
wd3:       MemAdr, Repeat(wd4);            !Decrement Address, check Address
wd4:       if gtr goto(wd0);               !if >0 more to do
           Cksum + Data, return;           !otherwise, add final word to Cksum

NextData:  MemAdr := MemAdr - 1, Fetch;    !Decr address and get that word
           Data := MDI, Return;            !Data goes on R

          
LoadConst: 0, IOB(constptr);
           not 0, IOB(Ramfile);
           not sync, IOB(RAMfile);
           not DskHead, IOB(RAMfile);
           DskSec, Field(0, 4);
           not SHIFT , IOB(Ramfile);
           not dskcyl, IOB(Ramfile);
           0, IOB(Ramfile);            !LH1 lo, not -1
           0, IOB(Ramfile);            !LH2 lo, not -1
           DskSec, Field(0, 4);
           not SHIFT, IOB(Ramfile);   !LH3 lo, Lh = blk #
           dskcyl, RightShift(4);
           dsktmp := shift and HiNibble; 
           dskTmp := dsktmp or dskhead; ! cyl(hi)/head
           not dsktmp, IOB(Ramfile);
           0, IOB(Ramfile);            !LH1 hi, not -1
           0, IOB(Ramfile);            !LH2 Hi, not -1
           r1 := not 0, IOB(Ramfile);  !LH3 hi
               
setUpDMA:  dskChan, IOB(ChanSel);
           0, IOB(DmaLhLo);
           337, IOB(DmaLhHi);
           MemAdr, IOB(DmaDbLo);
           Not Ustate(MemAdr), Field(14,4);
           Shift, IOB(DmaDbHi), return;

!Wait long enough for a sector to transfer, a head to settle, etc

WaitAwhile:dly := 177777;
WtWL1:     if Eql return;
           dly := dly -1, goto(Wtwl1);
        
            
!Get A Byte from Z80
 
RecZ80Byte:r1:= not 0;
waitbyte:  Bite := 0, if intrpend GoTo(VecInt);  !Allow interrupts
           dly := 100, call(wtwl1);
           r1 := r1 - 1;                   !Dont wait too long
           if neq goto(waitbyte);          !give up eventually
           LeapPop(IsDskRdy), Hold;        !Z80 isn't saying anything
          
!Allow only Z80 Interrupts to do anything

Z80Int:    IOB(ioReadFIFO), loc(700);             !Here on Z80 Read Interrupt
           Bite := IOD and 377, Return;           !pick up byte and return
                 
        
BadInt1:   tmp := 5, goto(busted), loc(704);  !Bad Interrupt Codes


dskIntr:   IOB(dskStat), Loc(710);      ! read status
           DskStatus := IOD And 3777, return;
        
                            
BadInt3:   tmp := 7, goto(busted), loc(714);


Z80OutInt: IOB(ioStatReg),  Loc(720);
           IOD and WrtReady; 
           if Neq return;
           tmp := 5, Goto(Busted);
           
BadInt5:   tmp := 11, goto(busted), loc(724);
BadInt6:   tmp := 12, goto(busted), loc(730);
BadInt7:   tmp := 13, goto(busted), loc(734);
                   
! Subroutine to check whether the drive is ready
!------------------------------------------------------------------------
!   entry: none
!-------------------------------------------------------------------------

isDrvRdy:  IOB(dskStat);
           IOD and ReadyBit;
           0, if eql return;
          
WaitAgain: Dly := 1, Call(WtWl1);     ! used to be 10#500 
           r1 := r1 - 1;              ! But Don't Wait for Drive to come Ready
           1, If c19 Return;          ! Press Boot Button again and "Bo","Go0"
           goto(isDrvRdy);            ! Wait for drive to become ready
            

Restore:   IOB(DskStat);
           DskStatus := IOD And 3777;
           DskStatus And (ReadyBit or OnCyl Or Track0);
           If EQL Return;
           DriveNum Or (ControlBits Or SeekOut),      ! Set up for seek out.
                                IOB(DskCtl);           
           (0 or HiSeekCount), IOB(DskCtl);
           nop;                                       ! needed
           (0 Or LoSeekCount), IOB(DskCtl);
           r1 := not 0;                               ! needed.
Wtrstr:
           DskStatus := 0, If IntrPend Call(VecInt);
           DskStatus And 3777;                        ! interrupt?
           1, If Eql GoTo(RestorWait);
           DskStatus And Fault;
           DskStatus And (readybit or Track0 Or OnCyl), 
                                        If Eql goto(NoDskSpinUp);
           DskStatus And OnCyl, If Eql Return;
RestorWait:r1 := r1 - 1, if eql GoTo(Restore);
           Tmp := 4, If C19 GoTo(Busted);
           Dly := 10, Call(WtWl1);
           GoTo(WtrStr);

!*   RestorDone: Data := 0, return;

InitAll:   Reset, IOB(ioCtlReg);                      !turn off z80
           Reset, IOB(SMCTL);
           (Reset Or ControlBits), IOB(dskCtl);
           EnbHlf, IOB(smctl);
           Return;
           
                            
VecInt:    Vector(Z80Int);

End;
