!!!     Dual - Controlstore dual address test.
!       J. P. Strait      30 Oct 80.
!       Copyright (C) Three Rivers Computer Corporation, 1980, 1981, 1982, 1983.

!!      Modification history.
!
!       30 Oct 80  V1.0  JPS  Start program.

!!!     Dual performs a dual address test on the Perq writable control-
!       store.  Dual is designed to run in the boot proms to increase its
!       chances of running in spite of controlstore addressing errors.
!
!       Dual tests for dual address errors by being suspicious of each
!       controlstore location in the range 4000..7777.  To test a particular
!       location, Dual writes an interesting instruction into that location
!       and then fills up the rest of the controlstore (0..7777) with an
!       uninteresting instruction which is the complement of the interesting
!       one.  This way, if there is an addressing problem in any part of
!       the controlstore, some bit in the interesting instruction will
!       be changed.  Dual attempts to execute the interesting instruction
!       and then determines what happened.  If an error is detected, Dual
!       either tight loops at address 377 or goes off the deep end.
!
!       The interesting instruction:
!
!            R377 := Tos := 0, Push, Return;
!
!       The uninteresting instruction:
!
!            Tos - R377, Hold, if Geq CallS(2000);


        Define(Interesting,10);
        Define(UnInteresting,11);
        Define(T,12);
        
        Define(R377,377);
        
        
        Constant(Hi,  177400);       ! Y=0, X=377
        Constant(Mid, 005204);       ! SF=4, F=0, H=0, B=1, Jmp=12, Cnd=0
        Constant(Low, 000014);       ! Alu=1, W=1, A=0, Z=0
        
        Constant(First,0000);        ! First location used by Dual
        Constant(Last,0377);         ! Last location used by Dual
        Constant(CallLoc,0100);      ! Location of the CallS
        
        
        Place(First,Last);


Dual:   Interesting := 4000, Loc(First);
Dual1:  StackReset, Call(SLoad);

!       First, write the interesting instruction

        not Hi;
        WcsHi, if True GotoS(Dual2);
Dual2:  not Mid;
        WcsMid, if True GotoS(Dual3);
Dual3:  not Low;
        WcsLow, if True GotoS(Dual4);
Dual4:  UnInteresting := 7777;

!       Next, write the uninteresting instructions.

        LoadS(7777);
Dual5:  Interesting xor UnInteresting;
        if Eql Goto(Dual8);
        Hi;
        WcsHi, if True GotoS(Dual6);
Dual6:  Mid;
        WcsMid, if True GotoS(Dual7);
Dual7:  Low;
        WcsLow, if True GotoS(Dual8);
!Dual8:  UnInteresting := UnInteresting - 1, Repeat(Dual5);
Dual8:  UnInteresting := UnInteresting - 1, Repeat(Dual8a);
Dual8a: UnInteresting xor Last;
        if Neq Goto(Dual5);
        
!       Now try executing the interesting instruction.

        Call(SLoad);
        R377 := Tos := not 0;
        CallS, Loc(CallLoc);
        R377;
        if Neq Goto(Wrong);
        Tos;
        Pop, If Neq Goto(Wrong);
        not Tos;
        if Neq Goto(Wrong);

!       Advance to next interesting location.

        Interesting xor 7777;
        Interesting := Interesting + 1, if Neq Goto(Dual1);

!       Continue testing forever.

        Goto(Dual);


!!      SLoad - Load S with Interesting.

SLoad:  T := Interesting, LoadS(7777);
SLoad1: T xor 7777;
        if Eql Return;
        T := T + 1, Repeat(SLoad1);
        Return;


!!      These are repeated here in order to facilitate verification of the
!       Hi, Mid, and Low constants.

        R377 := Tos := 0, Push, Return;
        Tos - R377, Hold, if Geq CallS(2000);


!!      Come here when something goes wrong.

Wrong:  Goto(Wrong), Loc(Last);


        end;
