! SysB - Perq System Loader
!
!  Copyright 1981, Three Rivers Computer Corp.
!
! Change Log:
!
!  22 Jan 81 V2.5  WJHansen  add copyright notice
!                            change error message 156
!                            make change log
!
!  2 May 81  V2.4  GGR  Change to load 3.75k instead of 3k microcode.

!  6 May 81  V2.3  JPS  At end of hard disk boot, seek to cylinder 0.

! 25 Apr 81  V2.2  JPS  Fix bug in hard disk seek code -- it wasn't waiting for
!                       the seek to finish.

! 24 Mar 81  V2.1  JPS  Change DIBDA to 40 for new file system.

!  V2.0  George Robertson - Carnegie-Mellon University
!  V1.0  Brian Rosen - Three Rivers Computer Corporation
!
! SysB starts by turning off the Z80 (in case a floppy boot was in
! progress).
! It then reads the boot id from the keyboard (lower case alphabetics are
! hard disk boots, upper case alphabetics are floppy boots).
! The default boot is 'a'.
! Start by reading microcode and loading it into the lower 3.75k of microstore.
! Then load system qcode.
! Then store disk id (0 or 1) and keystroke into the 4th and 5th words
! of the SIT table.
! Then start microcode at QCode entry point, 2400.
!
! This code is loaded by Boot, The Prom Bootstrap Loader
!
! The Diagnostic Display is set to 150 when this code is entered
!  Errors are:
!    150 - Sysb not loaded correctly
!    151 - Sysb did not complete
!    152 - Illegal Boot Key
!    153 - Hard Disk Restore Failure
!    154 - No such boot
!    155 - No interpreter for that key
!    156 - Interpreter file is empty
!    157 - Disk Error
!    158 - Floppy error
!    159 - Malformed Boot File
!    160 - CheckSum error in microcode
!    161 - CheckSum error in QCode
!    162 thru 168 - Bad interrupts
! this code sets the DDS to 198 on exit
!


place(7000,7777);        ! Boot Loads into the upper 2k of microstore
define(r0,0);
define(c400,1);
define(BootID,2);
define(BootKey,3);
define(c1777,4);
define(data,5);
define(Bite,6);
define(BigDly,7);
define(Boot1st,10);
define(Interp1st,11);
define(TryCnt,12);
define(NextDA,13);
define(SaveMA,14);
define(Cyl,15);
define(NewCyl,16);
define(SeekCnt,17);
define(Dir,20);
define(Head,21);
define(tmp,22);
define(Sec,23);
define(SecCnt,24);
define(Dly,25);
define(KeyTryCnt,26);
define(DskType,27);
define(CylHd,30);
define(MemAdr,31);
define(CkSum,32);
define(Offset,33);
define(ByteCnt,34);
define(NextCyl,35);
define(NextSec,13);   ! Note Same as NextDA
define(Word,36);
define(LastHead,37);
define(LastCyl,40);
define(BootCyl,41);
define(BootSec,10);                       ! Note same as Boot1st
define(InterpCyl,42);
define(InterpSec,11);                     ! Note same as Interp1st
define(IsFloppy,43);
define(LastAdr,44);      ! end of system qcode

constant(dstat,100);
constant(dseek,301);
constant(dhead,302);
constant(CylSec,310);
constant(FileL,311);
constant(FileH,312);
constant(Block,313);
constant(CWadrL,331);
constant(CWadrH,321);
constant(DatAdrL,330);
constant(DatAdrH,320);
constant(DirOut,0);
constant(DirIn,10);
constant(DIBDA,40);                       ! Disk Information Block disk addr
constant(StTrack,0);
constant(StHead,0);

constant(DIBCyl,5);                       ! Disk Info Block cylinder on Floppy
constant(DIBSec,3);                       ! Disk Info Block sector on Floppy
constant(SITInfo,406);

! The SAT/SIT table is 1st, followed by the cursor,
!   and together, all are 3000 octal long

constant(SatSitCursLen,3000);
constant(EndSatSitCursSec,6);             ! SatSitCursLen / #400

! the screen image is 1024 lines of (768/16) words or 48k
! it starts after the SAT/SIT table

constant(ScreenLen,140000);
constant(EndScreenP1,143000);             ! end of screen + 1 = SatSitCursLen + ScreenLen

!
! For Spice boots, the microcode is loaded after the system qcode and
! is 3.75*3 long

constant(UCodeSize,26400);
constant(sysbDDSdif,10#47);               ! What to add to DDS on good exit

!
! Offset in Disk Information Table for BootTable and InterpTable

constant(BootTableOffset,10#10);          ! Must agree with DiskIO.Pas
constant(InterpTableOffset,10#62);

SysbStart:
        Data := 0, StackReset,Loc(7000);  ! Increment the Diagnostic Display
        C400 := 400;                      ! A constant used many times
        C1777 := 1777;
        tmp := 6000;
        tmp, IOB(343);                    ! shut off video interrupts
        ThreeWayBranch(0);                ! Make sure 2910 stack is empty
        ThreeWayBranch(0);

! We turn the Z80 off for 2 reasons
! First, the hardware has a glitch when first starting up the Writable
! Control Store ram, the power surge can screw up the Z80.
! Secondly, we want to shut off the floppy boot sequence if it had started

        KeyTryCnt := 2, Call(Z80Off);     ! Wait a while for key
                                          ! Shut down Z80 to stop boot
        Call(WaitAWhile);                 ! Delay a few milliseconds
KeyRetry: 0, IOB(301);                    ! turn Z80 on
        Cyl := 0, Call(WaitAWhile);       ! Let it start up
        
!
! Read keyboard

        bite := 1, Call(KeysOnOff);       ! Turn Keyboard on
FindCh: Call(RecZ80Byte);                 ! Wait for keyboard char
        Bite - 153, if neq goto(NoKeys);
        IsFloppy := 0, if neq goto(FindCh);
        Call(RecZ80Byte);
        Bite - 1, if neq goto(FindCh);    ! Keyboard char prefix
        TryCnt := C400, if neq goto(FindCh);
        Call(RecZ80Byte);
        tmp := 10#152, if neq goto(FindCh);! preset error code for Illegal boot
        BootKey := Bite;                  ! Boot keystroke
        BootID := Bite;                   ! BootID is index
        BootID := BootID - 101;           ! subtract ASCII for "A"
        BootID - 31, if lss goto(Busted); ! ID out of range
        if leq goto(FlopBoot);            ! Upper case => Floppy Boot
        BootID := BootID - 40;
        BootID - 31, if lss goto(Busted);
        if gtr goto(Busted);
GotID:  bite := 0, Call(KeysOnOff);       ! Turn keyboard off

!
!Position the heads

Restore:tmp := 20;                        ! in WaitABit, the Track 0 bit
        Dir := DirOut, Call(Seek);        ! Go back one step
        TryCnt := TryCnt - 1, if neq goto(ReadDIB); ! Keep trying
        tmp := 10#153, if gtr goto(Restore);
        goto(Busted);                     ! busted if Restore failed
        
!
! Seek the disk One track in dir direction


Seek:   Dir or 27, iob(dseek);            ! Set the step bit + dir bit + reset
        Dly := C1777, Call(WaitLp);       ! Make a pulse
        Dir, iob(dseek);                  ! Clear the step bit
                                          ! Fall into WaitABit
                                          ! Assumes Seek Complete Happens
!
! Wait for a bit to come up


WaitABit: Call(WaitAWhile);               ! Wait some time
        iob(dstat);                       ! Get the disk status
        r0 := iod;
        r0 and tmp, return;               ! Test the bit and return

!
! Wait long enough for a sector to transfer, a head to settle, etc

WaitAWhile: Dly := 77777;
WaitLp: if eql return;
        Dly := Dly - 1, goto(WaitLp);

!
! Here when we didn't see a keystroke


NoKeys: KeyTryCnt := KeyTryCnt - 1;       ! Try it a few times
        if gtr goto(KeyRetry);            ! give the Z80 another chance
        BootKey := 141;
        BootID := 0, goto(GotID);         ! Default boot is 'a'

!
! Send a keyboard status change message to Z80


KeysOnOff: tmp := 153, Call(SndZ80Byte);  ! Start of message
        tmp := 007, Call(SndZ80Byte);     ! Set Keyboard Status
        tmp := 001, Call(SndZ80Byte);     ! One byte
        bite, IOB(307), return;           ! 0 = Off, 1 = On

!
! Read Disk Information Block


ReadDIB:
        MemAdr := 0;                      ! Read into memory 0 - 377
        NextCyl := DIBCyl;
        IsFloppy;
        NextSec := DIBSec, if neq goto(RdDib1);
        NextDA := DIBDA;                  ! NextDA overlaps NextSec
        NextCyl := 0;                     ! Must be 0 when Hard Disk is on

RdDib1: TryCnt := 10, Call(DoOneBlock);   ! Read the DIB
        BootID := BootID + BootID;        ! Get DA of Boot, 2 words/entry
        BootID + BootTableOffset, Fetch2; ! Offset to BootTable
        BootSec := MDI;                   ! Boot1st overlaps BootSec
        BootCyl := MDI;                   ! Must be 0 when Hard Disk is on
        BootSec + BootCyl;
        tmp := 10#154, if eql goto(Busted);! No boot for that key
        BootID + InterpTableOffset, Fetch2; ! Get DA of Interpreter
        InterpSec := MDI;                 ! Interp1st overlaps InterpSec
        InterpCyl := MDI;                 ! Must be 0 when Hard Disk is on
        InterpSec + InterpCyl;
        tmp := 10#155, if eql goto(Busted);! No interpreter for that key
        
!
! Load system qcode first
        
        MemAdr := 0;
        NextCyl := BootCyl;
        NextSec := BootSec;
        SecCnt := 0;
        TryCnt := 10, Call(DoOneBlock);   ! Skip over segment hdr blk
        NextCyl + NextSec;
        tmp := 10#159, if eql goto(Busted);! Malformed boot file
        
DoNextBlock: SecCnt - EndSatSitCursSec;   ! Are we at end of Sat/Sit table
        if neq goto(NotEndSS);
        MemAdr := MemAdr + ScreenLen;     ! Bypass screen area
        
NotEndSS: TryCnt := 10, Call(DoOneBlock);
        SecCnt := SecCnt + 1;
        NextCyl + NextSec;
        MemAdr := MemAdr + C400, if neq goto(DoNextBlock);
        
! Got system boot, checksum it, then load interpreter
        
        LastAdr := MemAdr;                ! save end address
        Cksum := 0, goto(CkRest);
SkpScr: MemAdr := SatSitCursLen;          ! skip over the screen area
CkRest: MemAdr := MemAdr - 1, Fetch;
        Cksum, if C19 goto(LdMic);        ! if MemAdr < 20-bit zero
        MemAdr := MemAdr - EndScreenP1;
        Cksum := MDI + CkSum;
        MemAdr - 1;                                
        if C19 goto(SkpScr);              ! if MemAdr = EndScreenP1
        MemAdr := MemAdr + EndScreenP1;
        goto(CkRest);
        
! Load interpreter microcode
! Will load all data from microcode file, but ASSUMES that it is 3.75k
! (or 45 blocks) long.

LdMic:  tmp := 10#161, if neq goto(Busted); ! Checksum error in Qcode
        MemAdr := LastAdr;                  ! load 3.75k of Ucode in hi memory
        NextSec := InterpSec;
        NextCyl := InterpCyl;
        TryCnt := 10, Call(DoOneBlock);     ! Skip over segment hdr blk
        NextSec + NextCyl;
        tmp := 10#156, if eql goto(Busted); ! Interpreter file is empty
        
DoNextIB: TryCnt := 10, Call(DoOneBlock);
        NextSec + NextCyl;
        MemAdr := MemAdr + C400, if neq goto(DoNextIB); ! Chain until 00

! Clear the rest of the microcode image.

Clear:  tmp := MemAdr;
        tmp := tmp - LastAdr;
        tmp - UCodeSize;
        if C19 Goto(Cl1);                 ! if (MemAdr - LastAdr) < UCodeSize
        Goto(Seek0);                      ! if (MemAdr - LastAdr) >= UCodeSize

Cl1:    MemAdr, Store;
        0;
        MemAdr := MemAdr + 1, Goto(Clear);
        
! Seek to cylinder 0 (if booted from hard disk).

Seek0:  IsFloppy;
        Cksum := 0, if Neq Goto(DoCSum);  ! if booted from floppy do checksum
        NextDA := 0, Call(HardSeek);      ! seek to cylinder 0

! Got interpreter, checksum it and put it into wcs
        
! *** NB:  The rest of sysb (and all that it calls) must be above 7377
DoCSum: MemAdr := LastAdr, goto(CkMic);     ! necessary to cross page boundary
CkMic:  MemAdr := MemAdr + UCodeSize, loc(7400);
        CkSum := 0, LoadS(7377), loc(7401);
wd0:    Cksum := Cksum + Data, Call(NextData), loc(7402);
        WCShi, if true GotoS(wd1), loc(7403);
wd1:    Cksum := Cksum + Data, Call(NextData), loc(7404);
        WCSmid, if true GotoS(wd2), loc(7405);
wd2:    Cksum := Cksum + Data, Call(NextData), loc(7406);
        WCSlow, if true GotoS(wd3), loc(7407);
wd3:    Repeat(wd0), loc(7410);
        Cksum := Cksum + Data, loc(7411);
        tmp := 10#160, if neq goto(Busted), loc(7412); ! CkSum Err in Microcode!        
CkDone: MemAdr := SITInfo, loc(7413);
        MemAdr, Store2, loc(7414);        ! Store harddisk=0 and keystroke
        IsFloppy, loc(7415);
        BootKey, loc(7416);
        tmp := sysbDDSdif, Call(SetDDS), loc(7417);  ! Good load (we hope)
        Call(Z80Off), loc(7420);          ! shut off disk and Z80
        ThreeWayBranch(0), loc(7421);     ! Make sure 2910 stack is empty
        ThreeWayBranch(0), loc(7422);
        ThreeWayBranch(0), loc(7423);
        ThreeWayBranch(0), loc(7424);
        ThreeWayBranch(0), loc(7425);
        goto(2400), loc(7426);            ! Enter QCode ucode
        
!
!Get a word out of memory to load into microstore

        
NextData: MemAdr := MemAdr - 1, Fetch, loc(7440); ! Decr addr and get that word
        Data := MDI, Return, loc(7441);           ! Data goes on R
        
!
! Here when we have to give up
        
Busted: tmp := tmp - 10#151, Call(SetDDS), loc(7450);
Sleep:  GoTo(Sleep), loc(7451);                   ! Loop forever

!
! Set Diagnostic Display


SetDDS: Dly := 10, StackReset, loc(7460);        ! Increment display
DDSWt:  if eql goto(DDSWt1), loc(7461);          ! wait 8 cycles
        Dly := Dly - 1, goto(DDSWt), loc(7462);
DDSWt1: tmp := tmp - 1, loc(7463);
        if neq goto(SetDDS), loc(7464);
        return, loc(7465);
        
!
! Turn Z80 Off


Z80Off: 200, IOB(301), loc(7500);         ! shut off disk and Z80
        0, IOB(307), loc(7501);           ! shut off Z80 output interrupts
        IOB(106), loc(7502);              ! dismiss Z80 input interrupt
        IOB(147), return, loc(7503);      ! dismiss memory parity interrupt

!
! Read one Spice Segment Block from hard disk into memory

DoOneBlock: IsFloppy;
        if neq goto(FDoOneBlock);
        Call(HardSeek);                   ! seek to right cylinder
        NextDA, IOB(CylSec);            ! Physical header data
        NextDA, Field(5,3);               ! Pick off head bits
        Shift, IOB(dhead);                ! head number
        0, IOB(CWAdrL);                   ! Label is at 376000
        not 1, IOB(CWAdrH);
        MemAdr xnor C1777, IOB(DatAdrL);  ! Memory address register
        r0 := UState(MemAdr);
        r0 and 10000;                     ! Check bit 16 of MemAdr
        if eql goto(MemHi);               ! if bit 16 is set
        not 0, IOB(DatAdrH);              ! Stash data in low memory
        
DoRead: 2, IOB(dseek);                    ! Read it baby
WaitBusy: IOB(dstat);                     ! pick up disk controller status
        r0 := IOD and 7;                  ! get state machine state
        r0 xor 7;                         ! code 7 is busy
        if neq goto(WaitBusy);            ! wait until disk is busy
        Dly := 177777;                    ! Don't wait forever
        
WtDone: nop;
        nop;
        nop;
        IOB(dstat);                       ! Check doneness
        r0 := IOD and 7;                  ! Code 7 is busy
        Dly := Dly - 1, if eql goto(IsDone); ! Code 0 is done, Keep trying
        if neq goto(WtDone);              ! Until you find it
        47, IOB(dseek);                   ! If you dont, Reset the disk
        Call(WaitAWhile);                 ! Let that work
        TryCnt := TryCnt - 1;
        tmp := 10#157, if leq goto(Busted);    ! I give up
        GoTo(DoOneBlock);                 ! Try it again
        
IsDone: 0, IOB(dseek);                    ! Clear disk and done
        SaveMA := MemAdr;
        MemAdr := 177002;                 ! NextAdr is at 376004
        MemAdr := MemAdr + MemAdr, Fetch; ! Pick it up
        NextDA := MDI;                    ! Chain to next DiskAddress
        MemAdr := SaveMA, return;

MemHi: not 1, IOB(DatAdrH);               ! Stash data in high memory
        goto(DoRead);



!
! Seek to NextDA (if necessary).

HardSeek: NextDA, Field(10,10);           ! pick off upper byte
        NewCyl := Shift;                  ! Thats the cylinder
        SeekCnt := NewCyl;                ! Compute distance to it
        SeekCnt := SeekCnt - Cyl;         ! as Desired - Current position
        if eql Return,                    ! if already there
                       SeekCnt;           ! check direction
        Dir := DirIn, if gtr goto(DoSeek); ! if positive, Direction is in
        Dir := DirOut;                    ! if negative, direction is out
        SeekCnt := Cyl;                   ! recompute a positive difference
        SeekCnt := SeekCnt - NewCyl;
        
DoSeek: Dir, IOB(dseek);                  ! Tell disk to seek the right way
        tmp := 153, Call(SndZ80Byte);     ! Tell Z80 to do it
        tmp := 010, Call(SndZ80Byte);     ! Seek Command
        tmp := SeekCnt, Call(SndZ80Byte); ! How many tracks
        Cyl := NewCyl;                    ! Now we are at a new track
        
WaitSeek: tmp := 10#157, Call(RecZ80Byte);  ! Wait for done
        Bite - 153, if neq goto(Busted);
        if neq goto(WaitSeek);
        Call(RecZ80Byte);
        Bite - 12, if neq goto(Busted);
        if neq goto(WaitSeek);
        Return;                           ! all done

       
! 
! Receive a character from the Z80

RecZ80Byte: BigDly := 77777;              ! 32k*(64*2)=4.2M cycles 
waitbyte: if intrpend Vector(Z80Int);     ! * .00017 ms/cycle = .7 sec
        Dly := 100, call(WaitLp);
        BigDly := BigDly - 1;
        if neq goto(waitbyte);
        1, return;                        ! return neq if time out
        
Z80Int: iob(106), loc(7100);              ! Here when Z80 sends a byte
        Bite := iod and 377;              ! pick up byte
        0, return;                        ! return eql
         
! 
! All other interrupts are verboten

BadInt1: tmp := 10#162, goto(Busted), loc(7104);
BadInt2: tmp := 10#163, goto(Busted), loc(7110);
BadInt3: tmp := 10#164, goto(Busted), loc(7114);
BadInt4: tmp := 10#165, goto(Busted), loc(7120);
BadInt5: tmp := 10#166, goto(Busted), loc(7124);
BadInt6: tmp := 10#167, goto(Busted), loc(7130);
BadInt7: tmp := 10#168, goto(Busted), loc(7134);

!
! Send a character to the Z80

SndZ80Byte: tmp, IOB(307);
        goto(WaitAWhile);

FlopBoot: bite := 0, Call(KeysOnOff);     ! Turn keyboard off
        Data := 0;
        LastCyl := 0;
        LastHead := 0;
        
! Set single density, 2 sides, Z80 interrupts enabled
        
        Call(Flush);                      ! Make sure Z80 in right state
        tmp := 153, Call(SndZ80Byte);
        tmp := 014, Call(SndZ80Byte);
        tmp := 003, Call(SndZ80Byte);     ! Set floppy status
        tmp := 0, Call(SndZ80Byte);       ! Single density
        tmp := 2, Call(SndZ80Byte);       ! 2 heads
        IsFloppy := 001, IOB(307);        ! Z80 interrupts enabled
        Call(Flush);                      ! Ignore status returned
        GoTo(ReadDib);
        

!
! Read one Spice Segment Block from floppy into memory

        
FDoOneBlock: Cyl := NextCyl;              ! Cyl = NextCyl mod 77
        Cyl := Cyl - 10#77;
        Head := 4, if geq goto(FGotHead); ! Head = NextCyl div 77
        Cyl := NextCyl;
        Head := 0;
        
FGotHead: Head - LastHead;
        Cyl - LastCyl, if neq goto(FDoSeek);
        if eql goto(FGotCyl);
        
FDoSeek: tmp := 153, Call(SndZ80Byte);
        tmp := 002, Call(SndZ80Byte);     ! Floppy command
        tmp := Head, Call(SndZ80Byte);    ! Head and unit
        tmp := Cyl, Call(SndZ80Byte);     ! Cylinder
        tmp := 1, Call(SndZ80Byte);       ! Sector
        tmp := 4, Call(SndZ80Byte);       ! Seek command
        tmp := 1, Call(SndZ80Byte);       ! Fake byte count
        000, IOB(307);                    ! Fake data
        
FWtDone: Call(RecZ80Byte);                ! Wait for done
        Bite - 153, if neq goto(FlopErr);
        if neq goto(FWtDone);
        Call(RecZ80Byte);
        Bite - 21, if neq goto(FlopErr);
        if neq goto(FWtDone);
        Call(RecZ80Byte);
        Bite and 1, if neq goto(FlopErr);
        if neq goto(FlopErr);             ! Status = error
        LastCyl := Cyl;
        LastHead := Head;
        
FGotCyl: SaveMA := MemAdr;                ! Save address
        
! Read Headers from sector 1 of current cylinder
        
        MemAdr := 177000;                 ! Put headers sector at 376000
        MemAdr := MemAdr + MemAdr;
        Sec := 1;
        TryCnt := 10, Call(FDoOneSec);
        
! Read four sectors of block
        
        Sec := NextSec;
        MemAdr := SaveMA;
        TryCnt := 10, Call(FDoOneSec);
        MemAdr := MemAdr + 100, Call(FDoNextSec);
        MemAdr := MemAdr + 100, Call(FDoNextSec);
        MemAdr := MemAdr + 100, Call(FDoNextSec);
        
! Set next cylinder and sector
        
        NextSec - 3;
        NextSec - 10#23, if eql goto(Blk0);
        NextSec - 10#19, if eql goto(Blk1);
        NextSec - 10#15, if eql goto(Blk2);
        NextSec - 10#11, if eql goto(Blk3);
        if eql goto(Blk4);
        MemAdr := 177026;                 ! 5th blk hdr at 376054
        
FGotHdr: MemAdr := MemAdr + MemAdr, Fetch2;
        NextSec := MDI;
        NextCyl := MDI;
        MemAdr := SaveMA, return;

Blk0:   MemAdr := 177002;                 ! 0th blk hdr at 376004;
        goto(FGotHdr);
Blk1:   MemAdr := 177006;                 ! 1st blk hdr at 376014;
        goto(FGotHdr);
Blk2:   MemAdr := 177012;                 ! 2nd blk hdr at 376024;
        goto(FGotHdr);
Blk3:   MemAdr := 177016;                 ! 3rd blk hdr at 376034;
        goto(FGotHdr);
Blk4:   MemAdr := 177022;                 ! 4th blk hdr at 376044;
        goto(FGotHdr);

FDoNextSec: Sec := Sec + 5;
        Sec - 10#26;
        if leq goto(FDoit);
        Sec := Sec - 10#24;
FDoit:   TryCnt := 10, goto(FDoOneSec);


!
! Read one sector from floppy

FDoOneSec: tmp := 153, Call(SndZ80Byte);
        tmp := 002, Call(SndZ80Byte);     ! Floppy command
        tmp := Head, Call(SndZ80Byte);    ! Head and unit
        tmp := Cyl, Call(SndZ80Byte);     ! Cylinder
        tmp := Sec, Call(SndZ80Byte);     ! Sector
        tmp := 1, Call(SndZ80Byte);       ! Read floppy command
        tmp := 1, Call(SndZ80Byte);       ! Fake byte count
        000, IOB(307);                    ! Fake data
        
FWtRead: Call(RecZ80Byte);                ! Wait for result
        Bite - 153, if neq goto(FlopErr);
        if neq goto(FWtRead);
        Call(RecZ80Byte);
        Bite - 5, if neq goto(FlopErr);
        if neq goto(FWtRead);
        Call(RecZ80Byte);                 ! Get status
        Bite and 1, if neq goto(FlopErr);
        if neq goto(FlopErr);
        Call(RecZ80Byte);                 ! Get byte count
        if neq goto(FlopErr);
        Offset := 0, LoadS(77);           ! Assume 64 words (full sector)
        
FRdLoop: Call(RecZ80Byte);
        Word := Bite, if neq goto(FlopErr);
        Call(RecZ80Byte);
        if neq goto(FlopErr);
        Bite, LeftShift(10);
        Word := Shift or Word;
        MemAdr + OffSet, Store;
        Word;
        Offset := Offset + 1, repeat(FRdLoop);
        return;       


FlopErr: tmp := 10#158, goto(Busted);
        
Flush:  Call(RecZ80Byte);                 ! Ignore Z80 data
        if eql goto(Flush);
        return;
END;
